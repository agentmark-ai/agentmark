"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[872],{2e3:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var s=n(4848),o=n(8453);const r={title:"Type Safety (Coming Soon)"},i="Type Safety",d={id:"type-safety",title:"Type Safety (Coming Soon)",description:"WARNING! Type safety is still actively being worked on. It is not feature complete yet.",source:"@site/docs/type-safety.mdx",sourceDirName:".",slug:"/type-safety",permalink:"/agentmark/docs/type-safety",draft:!1,unlisted:!1,editUrl:"https://github.com/puzzlet-ai/agentmark-docs/edit/main/docs/type-safety.mdx",tags:[],version:"current",frontMatter:{title:"Type Safety (Coming Soon)"},sidebar:"docs",previous:{title:"Examples",permalink:"/agentmark/docs/examples"}},a={},p=[{value:"Ading Type Safety",id:"ading-type-safety",level:2},{value:"Adjust your tsconfig",id:"adjust-your-tsconfig",level:3},{value:"Add JSDOC types to define props for your promptdx files",id:"add-jsdoc-types-to-define-props-for-your-promptdx-files",level:3},{value:"Add types for your filters/tags",id:"add-types-for-your-filterstags",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"type-safety",children:"Type Safety"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"WARNING!"})," Type safety is still actively being worked on. It is not feature complete yet."]}),"\n",(0,s.jsx)(t.p,{children:"PrompDX supports type-safety with just a few short steps."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Type Safety",src:n(1969).A+"",width:"918",height:"408"})}),"\n",(0,s.jsx)(t.h2,{id:"ading-type-safety",children:"Ading Type Safety"}),"\n",(0,s.jsx)(t.h3,{id:"adjust-your-tsconfig",children:"Adjust your tsconfig"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note"}),": It is recommended to use a separate ",(0,s.jsx)(t.code,{children:"tsconfig.json"})," file for your PrompDX files."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    ...,\n    "allowJs": true\n  },\n  "mdx": {\n    "checkMdx": true\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"add-jsdoc-types-to-define-props-for-your-promptdx-files",children:"Add JSDOC types to define props for your promptdx files"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"{/**\n  * @typedef Props\n  * @property {string} name - Who to greet.\n  */\n}\n\n# Hello {props.name}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"add-types-for-your-filterstags",children:"Add types for your filters/tags"}),"\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:"types/global.d.ts"})," file and define your own custom filters/tags."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import type { BaseMDXProvidedComponents, FilterFunction } from '@puzzlet/promptdx';\n\ndeclare global {\n  const myCustomFilter: FilterFunction<string, string>;\n\n  interface MDXProvidedComponents extends BaseMDXProvidedComponents {\n    MyCustomTag: React.FC<MyCustomTagProps>;\n  }\n}\nexport {};\n"})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1969:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/type-safety-2716d0d57bd6b7acc344707ae58afee3.gif"},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);