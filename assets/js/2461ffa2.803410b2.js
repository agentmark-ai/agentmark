"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[503],{5335:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>p});var s=r(4848),i=r(8453);const l={title:"API"},a="API",t={id:"api",title:"API",description:"PromptDX supports 3 basic methods for interacting with prompts: runInference, deserialize, and serialize.",source:"@site/docs/api.mdx",sourceDirName:".",slug:"/api",permalink:"/promptdx/docs/api",draft:!1,unlisted:!1,editUrl:"https://github.com/puzzlet-ai/promptdx-docs/edit/main/docs/api.mdx",tags:[],version:"current",frontMatter:{title:"API"},sidebar:"docs",previous:{title:"Supported Providers",permalink:"/promptdx/docs/supported-providers"},next:{title:"Recipes",permalink:"/promptdx/docs/recipes"}},o={},p=[{value:"runInference",id:"runinference",level:2},{value:"Usage",id:"usage",level:3},{value:"Example:",id:"example",level:3},{value:"deserialize",id:"deserialize",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Example",id:"example-1",level:3},{value:"serialize",id:"serialize",level:2},{value:"Usage",id:"usage-2",level:3},{value:"Example",id:"example-2",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"api",children:"API"})}),"\n",(0,s.jsxs)(n.p,{children:["PromptDX supports 3 basic methods for interacting with prompts: ",(0,s.jsx)(n.code,{children:"runInference"}),", ",(0,s.jsx)(n.code,{children:"deserialize"}),", and ",(0,s.jsx)(n.code,{children:"serialize"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"runinference",children:"runInference"}),"\n",(0,s.jsx)(n.p,{children:"Run inference will take a prompt config, call the model provider's API, and return the result in PromptDX format."}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { runInference } from '@puzzlet/promptdx';\n...\nconst result = await runInference(prompt, props)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(n.p,{children:"my-prompt.mdx:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"---\nname: my-prompt\nmetadata:\n  model:\n    name: gpt-4o-mini\n---\n\n<User>\nSay: {props.greeting}\n</User>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const props = { greeting: 'Hello' };\nrunInference(myPrompt, props);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"Hello\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deserialize",children:"deserialize"}),"\n",(0,s.jsx)(n.p,{children:"Deserialize takes a prompt in PromptDX format, and turns it into the configuration needed to call a model provider."}),"\n",(0,s.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { deserialize } from '@puzzlet/promptdx';\n...\ndeserialize(prompt, props)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"my-prompt.mdx:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"---\nname: my-prompt\nmetadata:\n  model:\n    name: gpt-4o-mini\n---\n\n<User>\nSay: {props.greeting}\n</User>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const props = { greeting: 'Hello' };\ndeserialize(myPrompt, props);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'{\n  "model": "gpt-4o-mini",\n  "messages": [\n    {\n      "content": "Say: Hello",\n      "role": "user",\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"serialize",children:"serialize"}),"\n",(0,s.jsx)(n.p,{children:"Serialize allows you to take an existing configuration for a Prompt, and serialize it into a PromptDX file."}),"\n",(0,s.jsx)(n.h3,{id:"usage-2",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { serialize } from '@puzzlet/promptdx';\n...\nserialize(config, modelName, promptName)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Input Config:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "model": "gpt-4o-mini",\n  "top_p": 1,\n  "temperature": 0.7,\n  "messages": [\n    {\n      "content": "Say: {props.greeting}",\n      "role": "user",\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'serialize(config, "gpt-4o-mini", "basic-prompt")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Result (serialized string):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"---\nname: my-prompt\nmetadata:\n  model:\n    name: gpt-4o-mini\n    settings:\n      top_p: 1\n      temperature: 0.7\n---\n\n<User>\nSay: {props.greeting}\n</User>\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var s=r(6540);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);