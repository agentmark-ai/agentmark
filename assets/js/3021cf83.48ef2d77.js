"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[857],{5251:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>a});var r=t(4848),o=t(8453);const l={title:"Getting Started"},s="Getting Started",i={id:"getting-started",title:"Getting Started",description:"Follow the instructions below to install PrompDX in your app.",source:"@site/docs/getting-started.mdx",sourceDirName:".",slug:"/getting-started",permalink:"/promptdx/docs/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/puzzlet-ai/promptdx-docs/edit/main/docs/getting-started.mdx",tags:[],version:"current",frontMatter:{title:"Getting Started"},sidebar:"docs",next:{title:"Overview",permalink:"/promptdx/docs/overview"}},d={},a=[{value:"Install PrompDX",id:"install-prompdx",level:2},{value:"Create your first Prompt",id:"create-your-first-prompt",level:2},{value:"Run your Prompt",id:"run-your-prompt",level:2},{value:"VSCode",id:"vscode",level:3},{value:"Webpack Loader",id:"webpack-loader",level:3},{value:"Node.js",id:"nodejs",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,r.jsx)(n.p,{children:"Follow the instructions below to install PrompDX in your app."}),"\n",(0,r.jsx)(n.h2,{id:"install-prompdx",children:"Install PrompDX"}),"\n",(0,r.jsx)(n.p,{children:"Install with npm:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:"npm",children:"npm install @puzzlet/promptdx\n"})}),"\n",(0,r.jsx)(n.p,{children:"or yarn:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:"npm",children:"yarn add @puzzlet/promptdx\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-your-first-prompt",children:"Create your first Prompt"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"index.prompt.mdx"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"---\nname: basic-prompt\nmetadata:\n  model:\n    name: gpt-4o-mini\n---\n\n<User>Hello World</User>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"run-your-prompt",children:"Run your Prompt"}),"\n",(0,r.jsx)(n.h3,{id:"vscode",children:"VSCode"}),"\n",(0,r.jsx)(n.p,{children:"Run .prompt.mdx files directly within your VSCode editor."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=puzzlet.promptdx",children:"Download the VSCode Extension"})}),"\n",(0,r.jsx)(n.h3,{id:"webpack-loader",children:"Webpack Loader"}),"\n",(0,r.jsx)(n.p,{children:"Integrate PrompDX with your webpack workflow using our loader."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/puzzlet-ai/promptdx-loader",children:"PrompDX Webpack Loader"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import AllModelPlugins from '@puzzlet/promptdx/models/all-latest';\nimport { runInference, ModelPluginRegistry } from \"@puzzlet/promptdx\";\nimport MyPrompt from './example.prompt.mdx';\n\n// Note: Registering all latest models for demo/development purposes. \n// In production, you'll likely want to selectively load these, and pin models.\nModelPluginRegistry.registerAll(AllModelPlugins);\n\nconst run = async () => {\n  const props = { name: \"Emily\" };\n  const result = await runInference(MyPrompt, props);\n  console.log(result);\n}\nrun();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"nodejs",children:"Node.js"}),"\n",(0,r.jsx)(n.p,{children:"Run PrompDX directly in your Node.js environment. Below is a sample implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:"node",children:"import { runInference, load, ModelPluginRegistry } from \"@puzzlet/promptdx\";\nimport AllModelPlugins from '@puzzlet/promptdx/models/all-latest';\n\n// Note: Registering all latest models for demo/development purposes. \n// In production, you'll likely want to selectively load these, and pin models.\nModelPluginRegistry.registerAll(AllModelPlugins);\n\nconst run = async () => {\n  const Prompt = await load('./example.prompt.mdx');\n  const props = { name: \"Emily\" };\n  const result = await runInference(bundled, props);\n  console.log(result);\n}\nrun();\n"})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const o={},l=r.createContext(o);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);