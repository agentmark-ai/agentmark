import { spawn } from "child_process";
import path from "path";
import fs from "fs";

function getSafeCwd(): string {
  try { return process.cwd(); } catch { return process.env.PWD || process.env.INIT_CWD || '.'; }
}

const dev = async (options: { port?: number; runnerPort?: number } = {}) => {
  const fileServerPort = options.port || 9418;
  const runnerPort = options.runnerPort || 9417;
  const cwd = getSafeCwd();

  // Check if agentmark.config.ts exists
  const configPath = path.join(cwd, 'agentmark.config.ts');
  if (!fs.existsSync(configPath)) {
    console.error('Error: agentmark.config.ts not found in current directory');
    console.error('Run this command from your AgentMark project root');
    process.exit(1);
  }

  let adapterName = 'Unknown SDK';
  try {
    const jiti = require('jiti')(cwd, { interopDefault: true });
    const configModule = jiti(configPath);
    const client = configModule.client || configModule.default?.client;

    if (client?.getAdapter) {
      const adapter = client.getAdapter();
      const name = adapter?.__name;
      if (name) adapterName = name;
    }
  } catch (e) {}

  console.log('\n' + '─'.repeat(60));
  console.log('Starting AgentMark Development Servers');
  console.log(`Running with ${adapterName}`);
  console.log('─'.repeat(60));

  // Determine which dev server entry point to use
  const customDevServer = path.join(cwd, 'dev-server.ts');
  let devServerFile = customDevServer;

  if (!fs.existsSync(customDevServer)) {
    // Auto-generate dev server entry point
    const agentmarkDir = path.join(cwd, '.agentmark');
    if (!fs.existsSync(agentmarkDir)) {
      fs.mkdirSync(agentmarkDir, { recursive: true });
    }

    const autoGeneratedEntry = path.join(agentmarkDir, 'dev-entry.ts');
    const entryCode = `// Auto-generated runner server entry point
// To customize, create a dev-server.ts file in your project root

async function main() {
  const { client } = await import('../agentmark.config.js');

  // Get the adapter name to determine which dev module to import
  const adapter = client.getAdapter();
  const adapterName = adapter?.__name || 'unknown';

  // Dynamically import the adapter's runner server module
  // Try both with and without -adapter suffix for compatibility
  let createRunnerServer;
  try {
    const devModule = await import(\`@agentmark/\${adapterName}-adapter/dev\`);
    createRunnerServer = devModule.createRunnerServer;
  } catch (err1) {
    try {
      const devModule = await import(\`@agentmark/\${adapterName}/dev\`);
      createRunnerServer = devModule.createRunnerServer;
    } catch (err2) {
      console.error(\`Error: Could not load runner server from @agentmark/\${adapterName}-adapter/dev\`);
      console.error('Make sure your adapter supports dev mode');
      console.error(err2);
      process.exit(1);
    }
  }

  const args = process.argv.slice(2);
  const runnerPortArg = args.find(arg => arg.startsWith('--runner-port='));

  const runnerPort = runnerPortArg ? parseInt(runnerPortArg.split('=')[1]) : 9417;

  await createRunnerServer({ port: runnerPort, client });
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
`;

    fs.writeFileSync(autoGeneratedEntry, entryCode);
    devServerFile = autoGeneratedEntry;
  } else {
    console.log('Using custom dev-server.ts');
  }

  // Start file server as separate process
  const cliPath = path.join(__dirname, '../index.js');
  const fileServer = spawn('node', [cliPath, 'serve-files', '--port', fileServerPort.toString()], {
    stdio: 'inherit',
    cwd
  });

  const killProcessTree = (pid: number) => {
    try {
      // Kill all children first
      try {
        spawn('pkill', ['-P', String(pid)], { stdio: 'ignore' });
      } catch {}
      // Then kill the main process
      process.kill(pid, 'SIGKILL');
    } catch (e) {
      // Ignore errors (process may already be dead)
    }
  };

  fileServer.on('error', (error) => {
    console.error('Failed to start file server:', error.message);
    process.exit(1);
  });

  // Start runner server
  const runnerServer = spawn('npx', ['tsx', '--watch', devServerFile, 'agentmark.config.ts', 'agentmark/**/*', `--runner-port=${runnerPort}`], {
    stdio: 'inherit',
    cwd
  });

  runnerServer.on('error', (error) => {
    console.error('Failed to start runner server:', error.message);
    if (fileServer.pid) killProcessTree(fileServer.pid);
    process.exit(1);
  });

  runnerServer.on('exit', (code) => {
    console.log(`\nRunner server exited with code ${code}`);
    if (fileServer.pid) killProcessTree(fileServer.pid);
    process.exit(code || 0);
  });

  // Give servers time to start, then print summary
  setTimeout(() => {
    console.log('\n' + '─'.repeat(60));
    console.log('AgentMark Development Servers Ready');
    console.log('─'.repeat(60));
    console.log(`  File Server:  http://localhost:${fileServerPort}`);
    console.log(`  CLI Runner:   http://localhost:${runnerPort}`);
    console.log('─'.repeat(60) + '\n');
    console.log('Commands:');
    console.log('  $ agentmark run-prompt agentmark/<file>.prompt.mdx');
    console.log('  $ agentmark run-experiment agentmark/<file>.prompt.mdx');
    console.log('\nPress Ctrl+C to stop\n');
  }, 2000);

  // Handle process termination
  let isShuttingDown = false;
  const cleanup = () => {
    if (isShuttingDown) return;
    isShuttingDown = true;

    console.log('\nShutting down servers...');

    if (fileServer.pid) killProcessTree(fileServer.pid);
    if (runnerServer.pid) killProcessTree(runnerServer.pid);

    setTimeout(() => process.exit(0), 500);
  };

  process.on('SIGINT', cleanup);
  process.on('SIGTERM', cleanup);
  process.on('exit', cleanup);
};

export default dev;
